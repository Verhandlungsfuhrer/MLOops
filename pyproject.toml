[tool.ruff]
# Exclude a variety of commonly ignored directories.
extend-exclude = [
    ".ipynb_checkpoints",
    ".pyenv",
    ".pytest_cache",
    ".venv",
    ".vscode",
    "build",
    "site-packages",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py310"

[tool.ruff.lint]
# Unlike Flake8, Ruff doesn't enable McCabe complexity (`C901`) by default.
select = [
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort (auto-fixable)
    "S101",  # Checks use `assert` outside the test cases, test cases should be added into the exclusions
    "TCH",  # Rules around TYPE_CHECKING blocks
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]
ignore = [
    "E501",  # line too long, handled by black (ruff.format)
    "TCH003",  # Do not move imports from stdlib to TYPE_CHECKING block
    "W191",  # indentation contains tabs
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG",  # Unused function args -> fixtures nevertheless are functionally relevant
    "FBT",  # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004",  # Magic values used in comparisons
    "S101",  # Asserts allowed in tests
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.10"
mypy_path = "dags"
exclude = [
    ".ipynb_checkpoints",
    ".pyenv",
    ".pytest_cache",
    ".venv",
    ".vscode",
    "build",
    "site-packages",
]
explicit_package_bases = false
# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true
show_error_context = false
# do not follow imports (except for ones found in typeshed)
follow_imports = "skip"
# since we're ignoring imports, writing .mypy_cache doesn't make any sense
cache_dir = "/dev/null"
# suppress errors about unsatisfied imports
ignore_missing_imports = true
# allow untyped calls as a consequence of the options above
disallow_untyped_calls = true
# allow returning Any as a consequence of the options above
warn_return_any = false
# treat Optional per PEP 484
strict_optional = false
# ensure all execution paths are returning
warn_no_return = true
# lint-style cleanliness for typing needs to be disabled; returns more errors
# than the full run.
warn_redundant_casts = false
warn_unused_ignores = false
# The following are off by default since they're too noisy.
# Flip them on if you feel adventurous.
disallow_untyped_defs = true
check_untyped_defs = true
